services:
  nginx:
    image: nginx:1.27.1
    container_name: nginx
    ports:
      - "5678:80"
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - type: bind
        source: "./nginx.conf"
        target: "/etc/nginx/nginx.conf"
        read_only: true
      - type: bind
        source: "./logs"
        target: "/var/log/nginx"
      - type: bind
        source: "./report"
        target: "/usr/share/goaccess/report"
        read_only: true
      - type: bind
        source: ".htpasswd"
        target: "/etc/nginx/.htpasswd"
        read_only: true
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - api
      # - prism
      - swagger
      - redoc
      - pgweb
      - redis-commander
      - elasticsearch
      - kibana
      - minio
      - rabbitmq

  api:
    container_name: api
    environment:
      - TZ=Asia/Tokyo
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    volumes:
      - type: bind
        source: "."
        target: "/app"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    image: postgres:16.4
    container_name: db
    restart: always
    user: postgres
    volumes:
      - type: volume
        source: db-data
        target: /var/lib/postgresql/data
    environment:
      - POSTGRES_DB=chronotes
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=Asia/Tokyo
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgweb:
    image: sosedoff/pgweb:0.16.1
    container_name: pgweb
    ports:
      - "8081:8081"
    environment:
      - PGWEB_DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@db:5432/chronotes?sslmode=disable
      - TZ=Asia/Tokyo
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: redis:7.4.0
    container_name: redis
    volumes:
      - redis-data:/data
    environment:
      - TZ=Asia/Tokyo
    expose:
      - 6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5

  redis-commander:
    image: rediscommander/redis-commander
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=redis
      - TZ=Asia/Tokyo
    depends_on:
      redis:
        condition: service_healthy

  swagger:
    image: swaggerapi/swagger-ui:v5.17.14
    container_name: swagger
    environment:
      - SWAGGER_JSON=/tmp/api/bundled.yaml
      - TZ=Asia/Tokyo
    volumes:
      - type: bind
        source: "docs/api/bundled.yaml"
        target: "/tmp/api/bundled.yaml"
        read_only: true

  redoc:
    image: redocly/redoc:v2.1.5
    container_name: redoc
    environment:
      - SPEC_URL=/redoc/openapi/bundled.yaml
      - TZ=Asia/Tokyo
    volumes:
      - type: bind
        source: "docs/api/bundled.yaml"
        target: "/usr/share/nginx/html/openapi/bundled.yaml"
        read_only: true

  goaccess:
    image: allinurl/goaccess:1.9.3
    container_name: goaccess
    command: "--log-format=COMBINED --real-time-html /srv/logs/access.log --output /srv/report/index.html"
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - type: bind
        source: "./logs"
        target: "/srv/logs"
        read_only: true
      - type: bind
        source: "./report"
        target: "/srv/report"
    depends_on:
      nginx:
        condition: service_healthy

  elasticsearch:
    container_name: elasticsearch
    environment:
      - TZ=Asia/Tokyo
      - xpack.security.enabled=false
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    build:
      context: ./elastic
      dockerfile: Dockerfile
    ports:
      - 9200:9200
    volumes:
      - type: volume
        source: es-data
        target: /usr/share/elasticsearch/data
    expose:
        - 9300
    healthcheck:
        test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
        interval: 30s
        timeout: 30s
        retries: 3
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    environment:
      - TZ=Asia/Tokyo
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - "I18N_LOCALE=ja-JP"
    ports:
      - 5601:5601
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      interval: 30s
      retries: 3
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status
    restart: always

  minio:
    image: quay.io/minio/minio:RELEASE.2024-10-13T13-34-11Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - TZ=Asia/Tokyo
      - MINIO_ROOT_USER=root
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - type: volume
        source: minio-data
        target: /data
    command: server /data --console-address ":9001"

  rabbitmq:
    image: rabbitmq:4.0.2-management-alpine
    container_name: rabbitmq
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
      - type: volume
        source: rabbitmq-data
        target: /var/lib/rabbitmq
      - type: bind
        source: rabbitmq-log
        target: /var/log/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # prism:
  #   image: stoplight/prism:5.11.2
  #   command: "mock -h 0.0.0.0 /tmp/api/openapi.yaml"
  #   environment:
  #     - TZ=Asia/Tokyo
  #   volumes:
  #     - type: bind
  #       source: "docs/api"
  #       target: "/tmp/api"
  #       read_only: true

volumes:
  db-data:
  redis-data:
  es-data:
  minio-data:
  rabbitmq-data:
