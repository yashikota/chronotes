openapi: 3.0.0
info:
  title: Chronotes API
  version: v1
tags:
  - name: Health
  - name: Auth
  - name: Users
  - name: Notes
  - name: Images
  - name: Admin
paths:
  /api/v1/admin/notes:
    post:
      operationId: Admin_addNotes
      summary: Add notes
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Note'
      security:
        - BearerAuth: []
    delete:
      operationId: Admin_deleteNotes
      summary: Delete notes
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
            example: test123
            minLength: 4
            maxLength: 20
            pattern: ^[a-zA-Z0-9_]+$
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Admin
      security:
        - BearerAuth: []
  /api/v1/auth/login:
    post:
      operationId: Auth_login
      summary: Login user
      description: |-
        `user_id` または `email` のどちらかでログイン可能 \
        `user_id` でログインする場合は、
        ```json
        {
          "user_id": "yashikota",
          "password": "password"
        }
        ```

        `email` でログインする場合は、
        ```json
        {
          "email": "test@example.com",
          "password": "password"
        }
        ```
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImpvaG4uZG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                    pattern: ^[a-zA-Z0-9-_=]+\.[a-zA-Z0-9-_=]+\.[a-zA-Z0-9-_.+/=]+$
                    format: jwt
                    description: JWTトークン
                required:
                  - token
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      security:
        - {}
  /api/v1/auth/logout:
    post:
      operationId: Auth_logout
      summary: Logout user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Auth
      security:
        - BearerAuth: []
  /api/v1/auth/register:
    post:
      operationId: Auth_register
      summary: Register a new user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImpvaG4uZG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                    pattern: ^[a-zA-Z0-9-_=]+\.[a-zA-Z0-9-_=]+\.[a-zA-Z0-9-_.+/=]+$
                    format: jwt
                    description: JWTトークン
                required:
                  - token
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      security:
        - {}
  /api/v1/health:
    get:
      operationId: healthCheck
      summary: Check API health
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Health
      security:
        - {}
  /api/v1/images:
    post:
      operationId: Images_uploadImage
      summary: Upload an image
      description: 対応画像形式はpngとjpegとwebpのみ。ファイルサイズは10MBまで
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadImageResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Images
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      security:
        - BearerAuth: []
    get:
      operationId: Images_getImage
      summary: Get an image
      description: '`object_name` を指定して画像を取得。URLは60秒間のみ有効'
      parameters:
        - name: object_name
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: string
                format: byte
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Images
      security:
        - BearerAuth: []
    delete:
      operationId: Images_deleteImage
      summary: Delete an image
      description: '`object_name` を指定して削除'
      parameters:
        - name: object_name
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Images
      security:
        - BearerAuth: []
  /api/v1/notes:
    get:
      operationId: Notes_getNotes
      summary: Get a list of notes
      description: |-
        fieldsは
        - `note_id`
        - `user_id`
        - `title`
        - `content`
        - `length`
        - `tags` \
        が指定可能。\
        複数指定する場合は空白なしのコンマで指定 \
        (例) `title,tags`
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: true
          schema:
            type: string
            format: date-time
          explode: false
        - name: fields
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      security:
        - BearerAuth: []
    put:
      operationId: Notes_updateNote
      summary: Update a notes
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Note'
      security:
        - BearerAuth: []
    delete:
      operationId: Notes_deleteNote
      summary: Delete a notes
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Note'
      security:
        - BearerAuth: []
  /api/v1/notes/search:
    post:
      operationId: Notes_searchNotes
      summary: Search notes
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      security:
        - BearerAuth: []
  /api/v1/notes/share:
    get:
      operationId: ShareNotes_shareNotes
      summary: Share notes
      parameters:
        - name: note_id
          in: query
          required: true
          schema:
            type: string
            example: FHNWFLAQN
            pattern: ^[a-zA-Z0-9]+$
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      security:
        - BearerAuth: []
    delete:
      operationId: ShareNotes_unshareNotes
      summary: Unshare notes
      parameters:
        - name: note_id
          in: query
          required: true
          schema:
            type: string
            example: FHNWFLAQN
            pattern: ^[a-zA-Z0-9]+$
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      security:
        - BearerAuth: []
  /api/v1/users/me:
    get:
      operationId: Users_get
      summary: Get user information
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUpdateUserResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      security:
        - BearerAuth: []
    put:
      operationId: Users_update
      summary: Update user information
      description: |-
        更新したい要素のみ指定すること \
        例えば、GitHubアカウントのみ更新する場合
        ```json
        {
          "accounts": {
          "github_user_id": "yashikota"
        }
        ```
        このリクエストを送信する
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUpdateUserResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      security:
        - BearerAuth: []
    delete:
      operationId: Users_delete
      summary: Delete a user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      security:
        - BearerAuth: []
  /api/v1/users/promote:
    put:
      operationId: UsersPromote_promote
      summary: Promote a user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: password
                  minLength: 8
                  maxLength: 20
                  description: パスワード。8文字以上20文字以下
              required:
                - password
      security:
        - BearerAuth: []
components:
  schemas:
    Accounts:
      type: object
      properties:
        github_user_id:
          type: string
          example: yashikota
          pattern: ^[a-zA-Z0-9-]+$
          description: GitHubのユーザーID
        discord_channel_id:
          type: string
          example: '9419543265265028'
          pattern: ^[0-9]+$
          description: DiscordのチャンネルID
        slack_channel_id:
          type: string
          example: HG824ORHQ250
          pattern: ^[a-zA-Z0-9]+$
          description: SlackのチャンネルID
        qiita_user_id:
          type: string
          example: yashikota
          pattern: ^[a-zA-Z0-9_]+$
          description: QiitaのユーザーID
        zenn_username:
          type: string
          example: yashikota
          pattern: ^[a-zA-Z0-9_]+$
          description: Zennのユーザー名
        wakatime_token:
          type: string
          example: waka_763hgfds1-2ushy-2yfds-lkaxvczv-63hdfgshvds
          pattern: ^[a-z0-9-]+$
          description: Wakatimeのトークン
    ApiVersion:
      type: string
      enum:
        - v1
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Error
          description: Error message
    GetUpdateUserResponse:
      type: object
      required:
        - user_id
        - user_name
        - email
        - createdAt
        - updatedAt
        - accounts
      properties:
        user_id:
          type: string
          example: test123
          minLength: 4
          maxLength: 20
          pattern: ^[a-zA-Z0-9_]+$
          description: 任意に変更可能なID。英数字とアンダースコアのみ。4文字以上20文字以下
        user_name:
          type: string
          example: hoge太郎
          minLength: 1
          maxLength: 20
          description: ユーザー名。1文字以上20文字以下
        email:
          type: string
          example: test@example.com
          pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
          format: email
          description: メールアドレス
        createdAt:
          type: string
          format: date-time
          example: 2024-10-01T19:30:06Z
          description: 作成日時
        updatedAt:
          type: string
          format: date-time
          example: 2024-10-02T03:34:56Z
          description: 更新日時
        accounts:
          $ref: '#/components/schemas/Accounts'
    LoginRequest:
      type: object
      required:
        - password
      properties:
        user_id:
          type: string
          example: test123
          minLength: 4
          maxLength: 20
          pattern: ^[a-zA-Z0-9_]+$
          description: 任意に変更可能なID。英数字とアンダースコアのみ。4文字以上20文字以下
        email:
          type: string
          example: test@example.com
          pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
          format: email
          description: メールアドレス
        password:
          type: string
          example: password
          minLength: 8
          maxLength: 20
          description: パスワード。8文字以上20文字以下
    Note:
      type: object
      required:
        - user_id
        - note_id
        - title
        - content
        - tags
        - createdAt
        - updatedAt
      properties:
        user_id:
          type: string
          example: test123
          minLength: 4
          maxLength: 20
          pattern: ^[a-zA-Z0-9_]+$
          description: 任意に変更可能なID。英数字とアンダースコアのみ。4文字以上20文字以下
        note_id:
          type: string
          example: FHNWFLAQN
          pattern: ^[a-zA-Z0-9]+$
          description: 内部で付与されるID
        title:
          type: string
          example: GoとPythonの比較
          minLength: 1
          maxLength: 40
          description: タイトル
        content:
          type: string
          example: <h1>GoとPythonの比較</h1><p>GoとPythonの比較を行いました。</p>
          minLength: 1
          maxLength: 4000
          description: 内容
        tags:
          type: string
          example: go,python
          pattern: ^[a-z0-9, ]+$
          description: タグ。`,`区切りで複数指定可能
        createdAt:
          type: string
          format: date-time
          example: 2024-10-01T19:30:06Z
          description: 作成日時
        updatedAt:
          type: string
          format: date-time
          example: 2024-10-02T03:34:56Z
          description: 更新日時
    RegisterRequest:
      type: object
      required:
        - user_id
        - user_name
        - email
        - password
      properties:
        user_id:
          type: string
          example: test123
          minLength: 4
          maxLength: 20
          pattern: ^[a-zA-Z0-9_]+$
          description: 任意に変更可能なID。英数字とアンダースコアのみ。4文字以上20文字以下
        user_name:
          type: string
          example: hoge太郎
          minLength: 1
          maxLength: 20
          description: ユーザー名。1文字以上20文字以下
        email:
          type: string
          example: test@example.com
          pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
          format: email
          description: メールアドレス
        password:
          type: string
          example: password
          minLength: 8
          maxLength: 20
          description: パスワード。8文字以上20文字以下
    SuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Success
          description: Success message
    UpdateUserRequest:
      type: object
      properties:
        user_name:
          type: string
          example: hoge太郎
          minLength: 1
          maxLength: 20
          description: ユーザー名。1文字以上20文字以下
        email:
          type: string
          example: test@example.com
          pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
          format: email
          description: メールアドレス
        password:
          type: string
          example: password
          minLength: 8
          maxLength: 20
          description: パスワード。8文字以上20文字以下
        accounts:
          $ref: '#/components/schemas/Accounts'
    UploadImageResponse:
      type: object
      required:
        - object_name
      properties:
        object_name:
          type: string
          example: test123/01JAKVW7B6SRJZTV4AXV3E1FK1_my_dango.png
          description: 画像パス
    User:
      type: object
      required:
        - user_id
        - user_name
        - email
        - password
        - token
        - createdAt
        - updatedAt
      properties:
        user_id:
          type: string
          example: test123
          minLength: 4
          maxLength: 20
          pattern: ^[a-zA-Z0-9_]+$
          description: 任意に変更可能なID。英数字とアンダースコアのみ。4文字以上20文字以下
        user_name:
          type: string
          example: hoge太郎
          minLength: 1
          maxLength: 20
          description: ユーザー名。1文字以上20文字以下
        email:
          type: string
          example: test@example.com
          pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
          format: email
          description: メールアドレス
        password:
          type: string
          example: password
          minLength: 8
          maxLength: 20
          description: パスワード。8文字以上20文字以下
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImpvaG4uZG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          pattern: ^[a-zA-Z0-9-_=]+\.[a-zA-Z0-9-_=]+\.[a-zA-Z0-9-_.+/=]+$
          format: jwt
          description: JWTトークン
        createdAt:
          type: string
          format: date-time
          example: 2024-10-01T19:30:06Z
          description: 作成日時
        updatedAt:
          type: string
          format: date-time
          example: 2024-10-02T03:34:56Z
          description: 更新日時
        accounts:
          allOf:
            - $ref: '#/components/schemas/Accounts'
          description: 外部アカウント情報
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
servers:
  - url: https://chronotes.yashikota.com
    description: prd
    variables: {}
  - url: http://localhost:5678
    description: dev
    variables: {}
