openapi: 3.0.0
info:
  title: Chronotes API
  version: v1
tags:
  - name: Health
  - name: Auth
  - name: Users
  - name: Notes
  - name: Images
  - name: Admin
paths:
  /api/v1/admin/notes:
    post:
      operationId: Admin_addNotes
      summary: Add notes
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Note'
      security:
        - BearerAuth: []
    delete:
      operationId: Admin_deleteNotes
      summary: Delete notes
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Admin
      security:
        - BearerAuth: []
  /api/v1/auth/login:
    post:
      operationId: Auth_login
      summary: Login user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterLoginResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      security:
        - {}
  /api/v1/auth/logout:
    post:
      operationId: Auth_logout
      summary: Logout user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Auth
      security:
        - BearerAuth: []
  /api/v1/auth/register:
    post:
      operationId: Auth_register
      summary: Register a new user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterLoginResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      security:
        - {}
  /api/v1/health:
    get:
      operationId: healthCheck
      summary: Check API health
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Health
      security:
        - {}
  /api/v1/images:
    post:
      operationId: Images_uploadImage
      summary: Upload an image
      description: 対応画像形式はpngとjpegのみ。ファイルサイズは10MBまで。
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadImageResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Images
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      security:
        - BearerAuth: []
    delete:
      operationId: Images_deleteImage
      summary: Delete an image
      description: '`image_path`には画像のIDを指定して削除'
      parameters:
        - name: image_id
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Images
      security:
        - BearerAuth: []
  /api/v1/notes:
    get:
      operationId: Notes_getNotes
      summary: Get a list of notes
      description: fieldsは `note_id`, `user_id`, `title`, `content`, `length`, `tags`が指定可能。複数指定する場合は空白なしのコンマで指定 (例) `title,tags`
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: true
          schema:
            type: string
            format: date-time
          explode: false
        - name: fields
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      security:
        - BearerAuth: []
    put:
      operationId: Notes_updateNote
      summary: Update a notes
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Note'
      security:
        - BearerAuth: []
    delete:
      operationId: Notes_deleteNote
      summary: Delete a notes
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Note'
      security:
        - BearerAuth: []
  /api/v1/notes/search:
    post:
      operationId: Notes_searchNotes
      summary: Search notes
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchNotesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      security:
        - BearerAuth: []
  /api/v1/users/me:
    get:
      operationId: Users_get
      summary: Get user information
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      security:
        - BearerAuth: []
    put:
      operationId: Users_update
      summary: Update user information
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      security:
        - BearerAuth: []
    delete:
      operationId: Users_delete
      summary: Delete a user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      security:
        - BearerAuth: []
  /api/v1/users/promote:
    put:
      operationId: UsersPromote_promote
      summary: Promote a user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromoteUserRequest'
      security:
        - BearerAuth: []
components:
  schemas:
    Accounts:
      type: object
      properties:
        github_user_id:
          type: string
        discord_channel_id:
          type: string
        slack_channel_id:
          type: string
        qiita_user_id:
          type: string
        zenn_username:
          type: string
        wakatime_token:
          type: string
    ApiVersion:
      type: string
      enum:
        - v1
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
      example:
        message: Error
    LoginRequest:
      type: object
      required:
        - password
      properties:
        user_id:
          $ref: '#/components/schemas/UserID'
        email:
          $ref: '#/components/schemas/MailAddress'
        password:
          $ref: '#/components/schemas/Password'
      example:
        user_id:
          user_id: test123
        email:
          email: test@example.com
        password:
          password: password
      description: '`user_id` または `email` のどちらかでログイン可能'
    MailAddress:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
          format: email
          description: メールアドレス
    Note:
      type: object
      required:
        - user_id
        - note_id
        - title
        - content
        - tags
        - createdAt
        - updatedAt
      properties:
        user_id:
          $ref: '#/components/schemas/UserID'
        note_id:
          type: string
        title:
          type: string
        content:
          type: string
        tags:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        user_id:
          user_id: test123
        note_id: FHNWFLAQN
        title: My First Note
        content: This is the content of my first note.
        tags: work, project
        createdAt: 2023-01-01T12:00:00Z
        updatedAt: 2023-01-01T12:30:00Z
    Password:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          minLength: 8
          maxLength: 20
          description: パスワード。8文字以上20文字以下
    PromoteUserRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
    RegisterLoginResponse:
      type: object
      required:
        - token
      properties:
        token:
          $ref: '#/components/schemas/Token'
    RegisterRequest:
      type: object
      required:
        - user_id
        - user_name
        - email
        - password
      properties:
        user_id:
          $ref: '#/components/schemas/UserID'
        user_name:
          $ref: '#/components/schemas/UserName'
        email:
          $ref: '#/components/schemas/MailAddress'
        password:
          $ref: '#/components/schemas/Password'
      example:
        user_id:
          user_id: test123
        user_name:
          user_name: hoge太郎
        email:
          email: test@example.com
        password:
          password: password
    SearchNotesResponse:
      type: object
      required:
        - notes
      properties:
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
      example:
        notes:
          - user_id:
              user_id: test123
            note_id: FHNWFLAQN
            title: My First Note
            content: This is the content of my first note.
            tags: work, project
            createdAt: 2023-01-01T12:00:00Z
            updatedAt: 2023-01-01T12:30:00Z
          - user_id:
              user_id: test123
            note_id: FHNWFLAQN
            title: My First Note
            content: This is the content of my first note.
            tags: work, project
            createdAt: 2023-01-01T12:00:00Z
            updatedAt: 2023-01-01T12:30:00Z
    SuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
      example:
        message: Success
    Token:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          pattern: ^[a-zA-Z0-9-_=]+\.[a-zA-Z0-9-_=]+\.[a-zA-Z0-9-_.+/=]+$
          format: jwt
          description: JWTトークン
    UpdateUserRequest:
      type: object
      properties:
        user_name:
          $ref: '#/components/schemas/UserID'
        email:
          $ref: '#/components/schemas/MailAddress'
        password:
          $ref: '#/components/schemas/Password'
        accounts:
          $ref: '#/components/schemas/Accounts'
    UploadImageResponse:
      type: object
      required:
        - converted
        - original
      properties:
        converted:
          type: string
        original:
          type: string
    User:
      type: object
      required:
        - user_id
        - user_name
        - email
        - createdAt
        - updatedAt
      properties:
        user_id:
          $ref: '#/components/schemas/UserID'
        user_name:
          $ref: '#/components/schemas/UserName'
        email:
          $ref: '#/components/schemas/MailAddress'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        accounts:
          $ref: '#/components/schemas/Accounts'
      example:
        user_id:
          user_id: test123
        user_name:
          user_name: hoge太郎
        email:
          email: test@example.com
        createdAt: 2024-10-01T19:30:06Z
        updatedAt: 2024-10-02T03:34:56Z
        accounts:
          github_user_id: yashikota
          discord_channel_id: '9419543265265028'
          slack_channel_id: HG824ORHQ250
          qiita_user_id: yashikota
          zenn_username: yashikota
          wakatime_token: yashikota
    UserID:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: string
          minLength: 4
          maxLength: 20
          pattern: ^[a-zA-Z0-9_]+$
          description: 任意に変更可能なID。英数字とアンダースコアのみ。4文字以上20文字以下
    UserName:
      type: object
      required:
        - user_name
      properties:
        user_name:
          type: string
          minLength: 1
          maxLength: 20
          description: ユーザー名。1文字以上20文字以下
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
servers:
  - url: https://chronotes.yashikota.com
    description: prd
    variables: {}
  - url: http://localhost:5678
    description: dev
    variables: {}
