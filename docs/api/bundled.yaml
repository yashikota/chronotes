openapi: 3.0.0
info:
  title: Chronotes API
  version: v1
tags:
  - name: Health
  - name: Auth
  - name: Users
  - name: Notes
  - name: Admin
paths:
  /api/v1/admin/notes:
    post:
      operationId: Admin_addNotes
      summary: Add notes
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Note'
      security:
        - BearerAuth: []
    delete:
      operationId: Admin_deleteNotes
      summary: Delete notes
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Admin
      security:
        - BearerAuth: []
  /api/v1/auth/login:
    post:
      operationId: Auth_login
      summary: Login user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      security:
        - {}
  /api/v1/auth/logout:
    post:
      operationId: Auth_logout
      summary: Logout user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Auth
      security:
        - BearerAuth: []
  /api/v1/auth/register:
    post:
      operationId: Auth_register
      summary: Register a new user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      security:
        - {}
  /api/v1/health:
    get:
      operationId: healthCheck
      summary: Check API health
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Health
      security:
        - {}
  /api/v1/notes:
    get:
      operationId: Notes_getNotes
      summary: Get a list of notes
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: true
          schema:
            type: string
            format: date-time
          explode: false
        - name: fields
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      security:
        - BearerAuth: []
    put:
      operationId: Notes_updateNote
      summary: Update a notes
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Note'
      security:
        - BearerAuth: []
    delete:
      operationId: Notes_deleteNote
      summary: Delete a notes
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Note'
      security:
        - BearerAuth: []
  /api/v1/notes/search:
    post:
      operationId: Notes_searchNotes
      summary: Search notes
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchNotesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      security:
        - BearerAuth: []
  /api/v1/users/me:
    get:
      operationId: Users_get
      summary: Get user information
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      security:
        - BearerAuth: []
    put:
      operationId: Users_update
      summary: Update user information
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      security:
        - BearerAuth: []
    delete:
      operationId: Users_delete
      summary: Delete a user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      security:
        - BearerAuth: []
  /api/v1/users/promote:
    put:
      operationId: UsersPromote_promote
      summary: Promote a user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromoteUserRequest'
      security:
        - BearerAuth: []
components:
  schemas:
    Accounts:
      type: object
      properties:
        github_user_id:
          type: string
        discord_channel_id:
          type: string
        slack_channel_id:
          type: string
        qiita_user_id:
          type: string
        zenn_username:
          type: string
        wakatime_token:
          type: string
    AddTagsRequest:
      type: object
      required:
        - tags
      properties:
        tags:
          type: string
      example:
        tags: important, urgent, project
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
      example:
        message: Error
    LoginRequest:
      type: object
      required:
        - password
      properties:
        user_id:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        email: test@example.com
        user_id: test123
        password: password
    Note:
      type: object
      required:
        - user_id
        - note_id
        - title
        - content
        - tags
        - createdAt
        - updatedAt
      properties:
        user_id:
          type: string
        note_id:
          type: string
        title:
          type: string
        content:
          type: string
        tags:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        user_id: test123
        note_id: FHNWFLAQN
        title: My First Note
        content: This is the content of my first note.
        tags: work, project
        createdAt: 2023-01-01T12:00:00Z
        updatedAt: 2023-01-01T12:30:00Z
    PromoteUserRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
    RegisterUserRequest:
      type: object
      required:
        - user_id
        - user_name
        - email
        - password
      properties:
        user_id:
          type: string
        user_name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        user_id: test123
        user_name: hoge太郎
        email: test@example.com
        password: password
    RegisterUserResponse:
      type: object
      required:
        - user
        - token
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
    SearchNotesResponse:
      type: object
      required:
        - notes
      properties:
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
      example:
        notes:
          - user_id: test123
            note_id: FHNWFLAQN
            title: My First Note
            content: This is the content of my first note.
            tags: work, project
            createdAt: 2023-01-01T12:00:00Z
            updatedAt: 2023-01-01T12:30:00Z
          - user_id: test123
            note_id: FHNWFLAQN
            title: My First Note
            content: This is the content of my first note.
            tags: work, project
            createdAt: 2023-01-01T12:00:00Z
            updatedAt: 2023-01-01T12:30:00Z
    SuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
      example:
        message: Success
    UpdateUserRequest:
      type: object
      properties:
        user_name:
          type: string
        email:
          type: string
        password:
          type: string
        accounts:
          $ref: '#/components/schemas/Accounts'
    User:
      type: object
      required:
        - user_id
        - user_name
        - email
        - createdAt
        - updatedAt
      properties:
        user_id:
          type: string
        user_name:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        accounts:
          $ref: '#/components/schemas/Accounts'
      example:
        user_id: test123
        user_name: hoge太郎
        email: test@example.com
        createdAt: 2024-10-01T19:30:06Z
        updatedAt: 2024-10-02T03:34:56Z
    Versions:
      type: string
      enum:
        - v1
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
servers:
  - url: https://chronotes.yashikota.com
    description: prd
    variables: {}
  - url: http://localhost:5678
    description: dev
    variables: {}
